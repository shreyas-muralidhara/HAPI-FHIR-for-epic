# Using OAuth2 - Dynamic client protocol with EPIC SMART on FHIR 

OAuth 2.0 enables you to develop your application without having to build a credential management system. 
Instead of exposing login credentials to your application, your application and an EHR's authorization server 
exchange a series of authorization codes and access tokens. Your application can access protected patient data 
stored in an EHR's database after it obtains authorization from the EHR's authorization server.

### SMART authorization sequence


![Alt text](http://www.websequencediagrams.com/cgi-bin/cdraw?lz=bm90ZSBsZWZ0IG9mIEFwcDogUmVxdWVzdCBhdXRob3JpemF0aW9uCkFwcCAtPj4gRUhSIEF1dGh6IFNlcnZlcjogUmVkaXJlY3QgaHR0cHM6Ly97ZWhyADUJZV91cmx9Py4uLgoAZgVvdmVyADITQQAnCCBBcHBcbihtYXkgaW5jbHVkZSBlbmQtdXNlAE4GZW50aWMAgQ4FXG5hbmQADw4AgSYJKQpOb3RlIABWGE9uIGFwcHJvdmFsCgCBQRAgLT4-AIIBBwCBSBBhcHAgcgCBZwdfdXJpfT9jb2RlPTEyMyYAgVcJAII-DUV4Y2hhbmdlIGNvZGUgZm9yIGFjY2VzcyB0b2tlbjtcbmlmIGNvbmZpZGVudGlhbCBjbGllbnQsAIFyCXNlY3JldApBcHAtPgCCaBJQT1NUAIJsCgBPBSB1cmx9XG5ncmFudF90eXBlPQCDOg1fY29kZSYAgSQSAIJ7GwCCagdlIGEAgxQFAIEcFgCCaQcAg0YXSXNzdWUgbmV3AIFyBiB3aXRoIGNvbnRleHQ6XG4ge1xuIgCCEwZfAIIUBSI6IgCBcwYtAIIjBS14eXoiLFxuImV4cGlyZXMtaW4iOjM2MDAsXG4icGF0aWVudCI6IjQ1NiIsXG4uLi5cbn0Ag0MUAIVZBVsAgnYMIHJlc3BvbnNlXQ&s=default&h=NA3OIkJNCqFraI5a)  
Source: http://hl7.org/fhir/smart-app-launch/#smart-authorization-sequence

### EHR Launch on EPIC platform(SMART on FHIR)

#### Step 1: Application is Launched from the Patient Portal or EHR
Your app is launched by the EHR calling the launch URL which is specified in the EHR's configuration. The EHR 
sends a launch token and the FHIR server base URL (ISS parameter).

* **launch**: This parameter is an EHR generated token that signifies that an active EHR session already exists. This token is one-time use and will be exchanged for the authorization code.  
* **iss**: This parameter contains the authorization server's FHIR base URL.

#### Step 2: Your application retrieves the Conformance statement
To determine which authorize and token endpoints to use in the EHR launch flow, you should make a GET request 
to the metadata endpoint which is constructed by taking the iss provided and appending /metadata.  
  
```javascript

GET https://apporchard.epic.com/interconnect-aocurprd-oauth/api/FHIR/DSTU2/metadata HTTP/1.1
Accept: application/fhir+json

```  
Below is example Response would look like in the metadata response:  
                                              
```javascript
"extension": [
  {
    "url": "http://fhir-registry.smarthealthit.org/StructureDefinition/oauth-uris",
    "extension": [
      {
        "url": "authorize",
        "valueUri": "https://apporchard.epic.com/interconnect-aocurprd-oauth/oauth2/authorize"
      },
      {
        "url": "token",
        "valueUri": "https://apporchard.epic.com/interconnect-aocurprd-oauth/oauth2/token"
      }
    ]
  }
]
```  

In some cases when making your request to the metadata endpoint, you'll also need to include additional 
headers to ensure the correct token and authorize endpoints are returned. This is because in Epic, it is 
possible to configure the system such that the FHIR ISS is overridden on a per client ID basis. If you do 
not send the Epic-Client-ID HTTP header in your call to the metadata endpoint, you can receive the wrong 
token and authorize endpoints.  
                                             
```javascript
GET https://apporchard.epic.com/interconnect-aocurprd-oauth/api/FHIR/DSTU2/metadata HTTP/1.1
Accept: application/fhir+json
Epic-Client-ID: 0000-0000-0000-0000-0000
```

#### Step 3: Your application retrieves the Conformance statement(authorization)- Step1 in above image
the app constructs a request for authorization by adding the following parameters to the query component of the EHR’s “authorize” endpoint URL.  

* **client_id**:  contains your web application's client ID from Epic.
* **redirect_uri**:  application's redirect URI. After the request completes on the Epic server, this URI will be called as a callback. The value of this parameter needs to be URL encoded. This URI must also be registered with the EHR's authorization server by adding it to your app listing.
* **scope**: which the web application is requesting access. Starting with the Epic 2018 version, a scope of "launch" is required for EHR launch workflows. Starting with the November 2019 version of Epic, the "openid" and "fhirUser" OpenID Connect scopes are supported.
* **launch**: The value to use will be passed from the EHR.
* **state**: This optional parameter is generated by your app and is opaque to the EHR. The EHR's authorization server will append it to each subsequent exchange in the workflow for you to validate session integrity.



Optional parameters include:

* **code_challenge**: used for PKCE. This is the S256 hashed version of the code_verifier parameter, which will be used in the token request.
* **code_challenge_method**: indicates the method used for the code_challenge parameter and is required if using that parameter.

Here's an example of an authorization request. You will replace the [redirect_uri], [client_id], [launch_token], [state], and [code_challenge] placeholders with your own values.

```javascript
https://apporchard.epic.com/interconnect-aocurprd-oauth/oauth2/authorize?scope=launch&response_type=code&redirect_uri=[redirect_uri]&client_id=[client_id]&launch=[launch_token]&state=[state]&code_challenge=[code_challenge]&code_challenge_method=S256
```


#### Step 4: EHR's authorization server reviews the request - Step 2 in above image

The EHR decides whether to grant or deny access. This decision is communicated to the app when the EHR authorization server returns an authorization code (or, if denying access, an error response). Authorization codes are short-lived, usually expiring within around one minute. The code is sent when the EHR authorization server causes the browser to navigate to the app’s redirect_uri, with the following URL parameters:

* **code**: This parameter contains the authorization code generated by Epic, which will be exchanged for the access token in the next step.
* **state**: This parameter will have the same value as the earlier state parameter. For more information, refer to Step 3.

Here's an example of what the redirect will look like if Epic's authorization server accepts the request:
```javascript
https://apporchard.epic.com/test/smart?code=yfNg-rSc1t5O2p6jVAZLyY00uOOte5KM1y3YUxqsJQnBKEMNsYqOPTyVqcCH3YXaPkLztO9Rvf7bhLqQTwALHcHN6raxpTbR1eVgV2QyLA_4K0HrJO92et3qRXiXPkj7&state=abc123
```

#### Step 5: App exchanges authorization code for access token - - Step 3 in above image

After obtaining an authorization code, the app trades the code for an access token via HTTP POST to the EHR authorization server’s token endpoint URL, using content-type.  
For public apps, authentication is not possible (and thus not required), since a client with no secret cannot prove its identity when it issues a call. (The end-to-end system can still be secure because the client comes from a known, https protected endpoint specified and enforced by the redirect uri.) For confidential apps, an Authorization header using HTTP Basic authentication is required, where the username is the app’s client_id and the password is the app’s client_secret.

* **grant_type**: For the EHR launch flow, this should contain the value "authorization_code".
* **code**: This parameter contains the authorization code sent from Epic's authorization server to your application as a querystring parameter on the redirect URI as described above.
* **redirect_uri**: This parameter must contain the same redirect URI that you provided in the initial access request.
* **client_id**: This parameter must contain the application's client ID issued by Epic that you provided in the initial request.
* **code_verifier**: This optional parameter is used to verify against your code_challenge parameter when using PKCE. This parameter is passed as free text and must match the code_challenge parameter used in your authorization request once it is hashed on the server using the code_challenge_method. This parameter is available starting in the August 2019 version of Epic.

The authorization server responds to the HTTP POST request with a JSON object that includes an access token. The response contains the following fields:

* **access_token**: This parameter contains the access token issued by Epic to your application and is used in future requests.
* **token_type**: In Epic's OAuth 2.0 implementation, this parameter always includes the value bearer.
* **expires_in**: This parameter contains the number of seconds for which the access token is valid.
* **scope**: This parameter describes the access your application is authorized for.
* **id_token**: Returned only for applications that have requested an openid scope. This parameter follows the guidelines of the OpenID Connect (OIDC) Core 1.0 specification. It is signed but not encrypted.
    * Available starting in the November 2019 version of Epic.
    * If the application also included a fhirUser scope, the OIDC token response contains a fhirUser claim, as described in the HL7 documentation. For Epic integrations, fhirUser references one of the following resources depending on the type of workflow:
        * Provider/EMP workflows: Practitioner resource
        * MyChart self access workflows: Patient resource
        * MyChart proxy access workflows: RelatedPerson resource
* **patient**: This parameter provides the FHIR ID for the patient in context at time of launch.
* **state**: This parameter will have the same value as the earlier state parameter. For more information, refer to Step 3.
